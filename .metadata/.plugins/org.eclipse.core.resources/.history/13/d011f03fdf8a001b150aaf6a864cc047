package kr.or.ddit.basic;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

import kr.or.ddit.basic.Parent.Child;

public class T16_NonSerializableParentTest {
	/**
	 * 부모 클래스가 Serializable 인터페이스를 구현하고 있지 않을 경우 \
	 * 부모 객체간 필드값 처리 방법
	 * 
	 * 	1. 부모 클래스가 Serializeable 인터페이스를 구현하도록 해야하나.
	 * 	2. 자식 클래스에 writeObject()와 readObject()메서드를 이용하여
	 * 	      부모객체의 필드값을 처리할 수 있도록 직접 구현한다.
	 * @param args
	 */
	public static void main(String[] args) {
		FileOutputStream fos = 
				new FileOutputStream("d:/D_Other/nonSerializeableTest.bin");
		ObjectOutputStream oos = new ObjectOutputStream(fos);
		
		Child child = new Child();
		child.setParentName("부모");
		child.setChildName("자식");
		oos.writeObject(child); //직렬화
		oos.flush(); //생략가능
		oos.close();
		
		FileInputStream fis =
				new FileInputStream("d:/D_Other/nonSerializeableTest.bin");
		ObjectInputStream ois = new ObjectInputStream(fis);
		Child child2 = (Child) ois.readObject(); //역직렬화
		System.out.println("parentName" + child2.getParentName());
		System.out.println("childName" + child2.getChildName());
		
		ois.close();
		fis.close(); // 생략가능
	}
}

/**
 * 
 * 
 */

class Parent {
	 
public Parent(String parentName) {
		super();
		this.parentName = parentName;
	}

private String parentName;

public String getParentName() {
	return parentName;
}

public void setParentName(String parentName) {
	this.parentName = parentName;
}

class Child extends Parent implements Serializable{
	
	public Child(String parentName, String childName) {
		super(parentName);
		this.childName = childName;
	}

	public String getChildName() {
		return childName;
	}

	public void setChildName(String childName) {
		this.childName = childName;
	}

	private String childName;
}
}